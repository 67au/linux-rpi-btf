name: Prepare linux source

on:
  workflow_dispatch:
  workflow_call:

jobs:
  alarm_build:
    runs-on: ubuntu-latest
    name: Prepare linux source

    permissions:
      contents: read
      packages: read

    steps:
      - name: Set workdir
        id: setup
        run: |
          mkdir -p ./workdir/repo  
      - uses: actions/checkout@v4
        with:
          repository: archlinuxarm/PKGBUILDs
          path: './workdir/PKGBUILDs'
      - uses: uraimo/run-on-arch-action@v2.7.1
        name: Prepare only
        id: prepare
        with:
          arch: aarch64
          distro: archarm_latest
          githubToken: ${{ secrets.GH_PAT }}
          dockerRunArgs: |
            --volume "${PWD}/workdir:/workdir" --user alarm
          shell: /bin/bash
          install: |
            sed -i 's/^CheckSpace/#CheckSpace/g' /etc/pacman.conf
            pacman -Syu --noconfirm --noprogressbar --needed base gawk perl
            rm -rf /etc/pacman.d/gnupg
            pacman-key --init
            pacman-key --populate archlinuxarm
            pacman-key --lsign-key "builder@archlinuxarm.org"
            pacman -S --noconfirm --noprogressbar --needed base-devel python pahole ccache distcc bc kmod inetutils
            useradd -m alarm
            sed -i 's/#MAKEFLAGS="-j2"/MAKEFLAGS="-j5"/' /etc/makepkg.conf
            sed -i 's/#PACKAGER="John Doe <john@doe.com>"/PACKAGER="${{ secrets.PACKAGER }}"/' /etc/makepkg.conf
            sed -i 's/#GPGKEY=""/GPGKEY="${{ secrets.GPGKEY }}"/' /etc/makepkg.conf
            sed -i "s/PKGEXT='.pkg.tar.xz'/PKGEXT='.pkg.tar.zst'/" /etc/makepkg.conf
            sed -i "s/BUILDENV=(!distcc color !ccache check !sign)/BUILDENV=(!distcc color ccache check sign)/" /etc/makepkg.conf
            # sed -i 's/#DISTCC_HOSTS=""/DISTCC_HOSTS="localhost\/5:3632"/' /etc/makepkg.conf
            echo "alarm ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers
          run: |
            sudo chown alarm:alarm -R /workdir
            cd /workdir/PKGBUILDs/core/linux-rpi
            echo 'Hacking PKGBUILD'
            sed -i "s#make olddefconfig#sed -i '/CONFIG_DEBUG_INFO/d;/CONFIG_RING_BUFFER/d;/CONFIG_TRACING/d;/CONFIG_STACKTRACE/d;/CONFIG_NOP_TRACER/d;/CONFIG_BINARY_PRINTF/d;/CONFIG_EVENT_TRACING/d;/CONFIG_TRACE_CLOCK/d;/CONFIG_TASKS_RCU/d' .config\nmake olddefconfig#" PKGBUILD
            sed -i "s#make olddefconfig#echo 'CONFIG_DEBUG_INFO=y\nCONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y\nCONFIG_DEBUG_INFO_COMPRESSED_ZLIB=y\nCONFIG_DEBUG_INFO_BTF=y\nCONFIG_KPROBE_EVENTS=y\nCONFIG_BPF_EVENTS=y\nCONFIG_RING_BUFFER=y\nCONFIG_TRACING=y\nCONFIG_STACKTRACE=y\nCONFIG_NOP_TRACER=y\nCONFIG_BINARY_PRINTF=y\nCONFIG_EVENT_TRACING=y\nCONFIG_TRACE_CLOCK=y\nCONFIG_TASKS_RCU=y' >> .config\nmake olddefconfig#" PKGBUILD
            sed -i "s#make olddefconfig#sed -i '/HAVE_GCC_PLUGINS/d' arch/arm64/Kconfig\nmake olddefconfig#" PKGBUILD
            # sed -i 's#make "$_image" modules dtbs#CCACHE_PREFIX=distcc make "$_image" modules dtbs#' PKGBUILD
            sed -i "s#prepare() {#prepare() {\nmv ../linux-rpi.install ../linux-rpi-btf.install#" PKGBUILD
            sed -i "s#pkgbase=linux-rpi#pkgbase=linux-rpi-btf#" PKGBUILD
            sed -i "s#linux-rpi-16k\n#linux-rpi\nlinux-rpi-16k\n#" PKGBUILD
            sed -i "s#'linux-headers'#'linux-headers' 'linux-rpi-headers'#" PKGBUILD
            makepkg -s --noconfirm --nodeps --nobuild 
            makepkg --printsrcinfo | awk '$1=="pkgver" {pkgver=$3}; $1=="pkgrel" {pkgrel=$3}; END {printf "ver=%s-%s\n", pkgver, pkgrel}' - >> "$GITHUB_OUTPUT"
      - name: Upload Repo
        uses: actions/upload-artifact@v4
        with:
          name: prepare-{{ $steps.prepare.outputs.ver }}
          path: './workdir/repo'
          
